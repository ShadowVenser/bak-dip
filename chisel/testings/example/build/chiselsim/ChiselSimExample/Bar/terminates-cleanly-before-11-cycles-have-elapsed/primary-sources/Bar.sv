// Generated by CIRCT firtool-1.114.1

// Include register initializers in init blocks unless synthesis is set
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Standard header to adapt well known macros for register randomization.

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_
module Bar(	// src/test/scala/MedianTest.scala:39:9
  input clock,	// src/test/scala/MedianTest.scala:39:9
        reset	// src/test/scala/MedianTest.scala:39:9
);

  reg  [3:0] done_c_value;	// src/main/scala/chisel3/util/Counter.scala:61:40
  wire       done = done_c_value == 4'h9;	// src/main/scala/chisel3/util/Counter.scala:61:40, :73:24
  always @(posedge clock) begin	// src/test/scala/MedianTest.scala:39:9
    if (reset)	// src/test/scala/MedianTest.scala:39:9
      done_c_value <= 4'h0;	// src/main/scala/chisel3/util/Counter.scala:61:40
    else	// src/test/scala/MedianTest.scala:39:9
      done_c_value <= done ? 4'h0 : done_c_value + 4'h1;	// src/main/scala/chisel3/util/Counter.scala:61:40, :73:24, :77:{15,24}, :87:{20,28}
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_	// src/test/scala/MedianTest.scala:39:9
    `ifdef FIRRTL_BEFORE_INITIAL	// src/test/scala/MedianTest.scala:39:9
      `FIRRTL_BEFORE_INITIAL	// src/test/scala/MedianTest.scala:39:9
    `endif // FIRRTL_BEFORE_INITIAL
    initial begin	// src/test/scala/MedianTest.scala:39:9
      automatic logic [31:0] _RANDOM[0:0];	// src/test/scala/MedianTest.scala:39:9
      `ifdef INIT_RANDOM_PROLOG_	// src/test/scala/MedianTest.scala:39:9
        `INIT_RANDOM_PROLOG_	// src/test/scala/MedianTest.scala:39:9
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT	// src/test/scala/MedianTest.scala:39:9
        _RANDOM[/*Zero width*/ 1'b0] = `RANDOM;	// src/test/scala/MedianTest.scala:39:9
        done_c_value = _RANDOM[/*Zero width*/ 1'b0][3:0];	// src/main/scala/chisel3/util/Counter.scala:61:40, src/test/scala/MedianTest.scala:39:9
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL	// src/test/scala/MedianTest.scala:39:9
      `FIRRTL_AFTER_INITIAL	// src/test/scala/MedianTest.scala:39:9
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
endmodule

