// Generated by CIRCT firtool-1.62.1
module new_pwm_v2(
  input         clock,
                reset,
  input  [31:0] wr_data,
  input         cs,
                wr_n,
  input  [1:0]  addr,
  output [31:0] rd_data,
  output [7:0]  pwm_out
);

  reg [31:0] div;
  reg [31:0] duty_a;
  reg [31:0] duty_b;
  reg [31:0] counter;
  reg        off_a;
  reg        off_b;
  always @(posedge clock) begin
    if (reset) begin
      div <= 32'h0;
      duty_a <= 32'h0;
      duty_b <= 32'h0;
      counter <= 32'h0;
      off_a <= 1'h0;
      off_b <= 1'h0;
    end
    else begin
      automatic logic duty_en = cs & ~wr_n & addr[1];
      if (cs & ~wr_n & ~(addr[1]))
        div <= wr_data;
      if (duty_en & ~(addr[0]))
        duty_a <= wr_data;
      if (duty_en & addr[0])
        duty_b <= wr_data;
      if (counter >= div)
        counter <= 32'h0;
      else
        counter <= counter + 32'h1;
      off_a <= counter >= duty_a | (|counter) & off_a;
      off_b <= counter >= duty_b | (|counter) & off_b;
    end
  end // always @(posedge)
  assign rd_data = addr[1] ? (addr[0] ? duty_b : duty_a) : div;
  assign pwm_out = {{4{~off_a}}, {4{~off_b}}};
endmodule


