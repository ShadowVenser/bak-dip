/* Generated by Amaranth Yosys 0.50 (PyPI ver 0.50.0.0.post105, git sha1 b5170e139) */

(* top =  1  *)
(* generator = "Amaranth" *)
module median(arr_1, arr_2, arr_3, arr_4, arr_5, arr_6, arr_7, arr_8, med, arr_0);
  input [7:0] arr_0;
  wire [7:0] arr_0;
  input [7:0] arr_1;
  wire [7:0] arr_1;
  input [7:0] arr_2;
  wire [7:0] arr_2;
  input [7:0] arr_3;
  wire [7:0] arr_3;
  input [7:0] arr_4;
  wire [7:0] arr_4;
  input [7:0] arr_5;
  wire [7:0] arr_5;
  input [7:0] arr_6;
  wire [7:0] arr_6;
  input [7:0] arr_7;
  wire [7:0] arr_7;
  input [7:0] arr_8;
  wire [7:0] arr_8;
  wire fc_0sel_0;
  wire fc_0sel_1;
  wire fc_0sel_2;
  wire [7:0] fc_0sub_0;
  wire [7:0] fc_0sub_1;
  wire [7:0] fc_0sub_2;
  wire fc_1sel_0;
  wire fc_1sel_1;
  wire fc_1sel_2;
  wire [7:0] fc_1sub_0;
  wire [7:0] fc_1sub_1;
  wire [7:0] fc_1sub_2;
  wire fc_2sel_0;
  wire fc_2sel_1;
  wire fc_2sel_2;
  wire [7:0] fc_2sub_0;
  wire [7:0] fc_2sub_1;
  wire [7:0] fc_2sub_2;
  wire [7:0] h0;
  wire [7:0] h1;
  wire [7:0] h2;
  wire [7:0] l0;
  wire [7:0] l1;
  wire [7:0] l2;
  wire [7:0] m0;
  wire [7:0] m1;
  wire [7:0] m2;
  output [7:0] med;
  wire [7:0] med;
  wire [7:0] sec_0;
  wire [7:0] sec_1;
  wire [7:0] sec_2;
  wire shsel_0;
  wire shsel_1;
  wire [7:0] shsub_1;
  wire slsel_0;
  wire slsel_1;
  wire [7:0] slsub_1;
  wire smsel_0;
  wire smsel_1;
  wire smsel_2;
  wire [7:0] smsub_0;
  wire [7:0] smsub_1;
  wire [7:0] smsub_2;
  wire tmsel_0;
  wire tmsel_1;
  wire tmsel_2;
  wire [7:0] tmsub_0;
  wire [7:0] tmsub_1;
  wire [7:0] tmsub_2;
  assign fc_0sel_0 = arr_0 > arr_1;
  assign fc_1sel_0 = arr_3 > arr_4;
  assign fc_1sub_0 = fc_1sel_0 ? arr_3 : arr_4;
  assign fc_1sub_1 = fc_1sel_0 ? arr_4 : arr_3;
  assign fc_1sel_1 = fc_1sub_1 > arr_5;
  assign fc_1sub_2 = fc_1sel_1 ? fc_1sub_1 : arr_5;
  assign l1 = fc_1sel_1 ? arr_5 : fc_1sub_1;
  assign fc_1sel_2 = fc_1sub_0 > fc_1sub_2;
  assign h1 = fc_1sel_2 ? fc_1sub_0 : fc_1sub_2;
  assign m1 = fc_1sel_2 ? fc_1sub_2 : fc_1sub_0;
  assign fc_2sel_0 = arr_6 > arr_7;
  assign fc_0sub_0 = fc_0sel_0 ? arr_0 : arr_1;
  assign fc_2sub_0 = fc_2sel_0 ? arr_6 : arr_7;
  assign fc_2sub_1 = fc_2sel_0 ? arr_7 : arr_6;
  assign fc_2sel_1 = fc_2sub_1 > arr_8;
  assign fc_2sub_2 = fc_2sel_1 ? fc_2sub_1 : arr_8;
  assign l2 = fc_2sel_1 ? arr_8 : fc_2sub_1;
  assign fc_2sel_2 = fc_2sub_0 > fc_2sub_2;
  assign h2 = fc_2sel_2 ? fc_2sub_0 : fc_2sub_2;
  assign m2 = fc_2sel_2 ? fc_2sub_2 : fc_2sub_0;
  assign slsel_0 = h0 > h1;
  assign slsub_1 = slsel_0 ? h1 : h0;
  assign fc_0sub_1 = fc_0sel_0 ? arr_1 : arr_0;
  assign slsel_1 = slsub_1 > h2;
  assign sec_0 = slsel_1 ? h2 : slsub_1;
  assign smsel_0 = m0 > m1;
  assign smsub_0 = smsel_0 ? m0 : m1;
  assign smsub_1 = smsel_0 ? m1 : m0;
  assign smsel_1 = smsub_1 > m2;
  assign smsub_2 = smsel_1 ? smsub_1 : m2;
  assign smsel_2 = smsub_0 > smsub_2;
  assign sec_1 = smsel_2 ? smsub_2 : smsub_0;
  assign shsel_0 = l0 < l1;
  assign fc_0sel_1 = fc_0sub_1 > arr_2;
  assign shsub_1 = shsel_0 ? l1 : l0;
  assign shsel_1 = shsub_1 > l2;
  assign sec_2 = shsel_1 ? shsub_1 : l2;
  assign tmsel_0 = sec_0 > sec_1;
  assign tmsub_0 = tmsel_0 ? sec_0 : sec_1;
  assign tmsub_1 = tmsel_0 ? sec_1 : sec_0;
  assign tmsel_1 = tmsub_1 > sec_2;
  assign tmsub_2 = tmsel_1 ? tmsub_1 : sec_2;
  assign tmsel_2 = tmsub_0 > tmsub_2;
  assign med = tmsel_2 ? tmsub_2 : tmsub_0;
  assign fc_0sub_2 = fc_0sel_1 ? fc_0sub_1 : arr_2;
  assign l0 = fc_0sel_1 ? arr_2 : fc_0sub_1;
  assign fc_0sel_2 = fc_0sub_0 > fc_0sub_2;
  assign h0 = fc_0sel_2 ? fc_0sub_0 : fc_0sub_2;
  assign m0 = fc_0sel_2 ? fc_0sub_2 : fc_0sub_0;
endmodule

